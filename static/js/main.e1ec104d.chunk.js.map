{"version":3,"sources":["types.ts","redux/index.ts","components/Intro.tsx","components/QuestionCard.tsx","components/QuizProgress.tsx","components/Quiz.tsx","components/Results.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["IStatus","initialState","status","INIT","questions","quizSlice","createSlice","name","reducers","setStatus","state","action","payload","addQuestions","submitAnswer","map","q","question","type","correct_answer","correctBool","test","is_correct","answer","store","configureStore","reducer","actions","Intro","dispatch","useDispatch","history","useHistory","useSelector","partition","isNil","answered","a","useEffect","length","resetQuiz","Typography","variant","component","color","Box","py","Fab","size","onClick","push","LinearProgress","value","style","position","top","left","right","height","QuestionCard","answerQuestion","Card","className","maxWidth","margin","CardContent","display","flexDirection","alignItems","justifyContent","minHeight","textAlign","ReactHtmlParser","CardActions","QuizProgress","props","theme","useTheme","percentComplete","completed","total","classes","makeStyles","root","width","bottom","darken","palette","primary","main","label","useStylesFacebook","CircularProgress","thickness","Quiz","questionIndex","useParams","index","isCurrentQuestion","isLastAnswer","category","pb","card","i","key","exact","path","isIn","match","CSSTransition","in","timeout","classNames","unmountOnExit","Results","to","correct","List","dense","ListItem","ListItemIcon","ListItemText","secondary","App","createMuiTheme","background","default","typography","fontFamily","join","overrides","MuiTypography","h4","marginBottom","MuiCardContent","padding","LOADING","fetch","json","then","res","results","LOADED","responsiveFontSizes","fetchData","ThemeProvider","CssBaseline","params","particlesConfig","overflow","Container","fixed","marginTop","basename","process","Boolean","window","location","hostname","WebFont","load","google","families","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1ec104d.chunk.js","sourcesContent":["export interface IAppState {\n  status: IStatus;\n  questions: IQuestion[];\n}\nexport enum IStatus {\n  INIT,\n  LOADING,\n  LOADED,\n}\nexport interface IQuestion {\n  category: string;\n  type: string;\n  difficulty: string;\n  question: string;\n  correct_answer: string;\n  is_correct?: boolean;\n}\n","import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IAppState, IQuestion, IStatus } from '../types';\n\nconst initialState: IAppState = {\n  status: IStatus.INIT,\n  questions: [],\n};\n\nconst quizSlice = createSlice({\n  name: 'quiz',\n  initialState,\n  reducers: {\n    setStatus(state, action: PayloadAction<IStatus>) {\n      state.status = action.payload;\n      if (action.payload === IStatus.INIT) {\n        state.questions = [];\n      }\n    },\n    addQuestions(state, action: PayloadAction<IQuestion[]>) {\n      state.questions = action.payload;\n    },\n    submitAnswer(\n      state,\n      action: PayloadAction<{ question: string; answer: boolean }>\n    ) {\n      state.questions = state.questions.map((q: IQuestion) => {\n        const isCurrentQuestion = q.question === action.payload.question;\n        if (isCurrentQuestion && q.type === 'boolean') {\n          switch (q.type) {\n            case 'boolean':\n              const { correct_answer } = q;\n              const correctBool = /true/i.test(correct_answer);\n              q.is_correct = correctBool === action.payload.answer;\n              break;\n            default:\n              q.is_correct = false; // Answer not verified\n          }\n        }\n        return q;\n      });\n    },\n  },\n});\n\nexport const store = configureStore({ reducer: quizSlice.reducer });\n\nexport const { setStatus, addQuestions, submitAnswer } = quizSlice.actions;\nexport default quizSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport partition from 'lodash/partition';\nimport isNil from 'lodash/isNil';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport Box from '@material-ui/core/Box';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport { IAppState, IStatus, IQuestion } from '../types';\nimport { setStatus } from '../redux';\n\nconst Intro = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const questions: IQuestion[] = useSelector((state: IAppState) => {\n    return state.questions;\n  });\n  const [answered] = partition(questions, q => !isNil(q.is_correct));\n  async function resetQuiz() {\n    dispatch(setStatus(IStatus.INIT));\n  }\n  useEffect(() => {\n    if (answered.length > 0) resetQuiz();\n  });\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h1\" color=\"primary\">\n        Welcome to the Triva Challenge!\n      </Typography>\n      <Box py=\"1em\">\n        <Typography variant=\"h5\" component=\"p\">\n          You will be presented with 10 True or False questions.\n        </Typography>\n      </Box>\n      <Typography variant=\"h5\" component=\"p\">\n        Can you score 100%?\n      </Typography>\n      <Box py=\"3em\">\n        <Fab\n          variant=\"extended\"\n          color=\"primary\"\n          size=\"large\"\n          onClick={() => history.push('/quiz/1')}\n        >\n          Begin&nbsp;\n          <PlayCircleFilledIcon />\n        </Fab>\n      </Box>\n      <LinearProgress\n        variant=\"determinate\"\n        value={0}\n        color=\"primary\"\n        style={{ position: 'fixed', top: 0, left: 0, right: 0, height: '1px' }}\n      />\n    </>\n  );\n};\n\nexport default Intro;\n","import React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport Fab from '@material-ui/core/Fab';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport Card from '@material-ui/core/Card';\nimport Box from '@material-ui/core/Box';\n\ninterface IQuestionCard {\n  question: string;\n  answerQuestion: Function;\n}\n\nconst QuestionCard = ({ question, answerQuestion }: IQuestionCard) => {\n  return (\n    <Card\n      className=\"card\"\n      variant=\"outlined\"\n      style={{ maxWidth: '600px', margin: '0 auto' }}\n    >\n      <CardContent>\n        <Box\n          py=\"0.4em\"\n          display={'flex'}\n          flexDirection={'column'}\n          alignItems={'center'}\n          justifyContent={'center'}\n          minHeight={160}\n          textAlign={'center'}\n        >\n          <Typography variant=\"h5\" component=\"p\">\n            {ReactHtmlParser(question)}\n          </Typography>\n        </Box>\n        <CardActions style={{ display: 'block' }}>\n          <Fab\n            variant=\"extended\"\n            color=\"primary\"\n            onClick={() => answerQuestion(true)}\n          >\n            True&nbsp;\n            <ThumbUpIcon />\n          </Fab>{' '}\n          <Fab\n            variant=\"extended\"\n            color=\"primary\"\n            onClick={() => answerQuestion(false)}\n          >\n            False&nbsp;\n            <ThumbDownIcon />\n          </Fab>\n        </CardActions>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default QuestionCard;\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, darken, useTheme } from '@material-ui/core/styles';\n\ninterface IQuestionCard {\n  question: string;\n  answerQuestion: Function;\n}\n\nconst QuizProgress = (props: { completed: number; total: number }) => {\n  const theme = useTheme();\n  const percentComplete: number = ((props.completed - 1) / props.total) * 100;\n  const useStylesFacebook = makeStyles({\n    root: {\n      position: 'relative',\n      textAlign: 'center',\n      width: '100px',\n      margin: '0 auto',\n    },\n    top: {\n      position: 'absolute',\n      left: 0,\n    },\n    bottom: {\n      position: 'absolute',\n      left: 0,\n      color: darken(theme.palette.primary.main, 0.5),\n    },\n    label: { position: 'relative', top: '62px' },\n  });\n  const classes = useStylesFacebook();\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"body1\" component=\"p\" className={classes.label}>\n        {props.completed} of {props.total}\n      </Typography>\n      <CircularProgress\n        variant=\"static\"\n        className={classes.bottom}\n        value={100}\n        thickness={2}\n        size={100}\n      ></CircularProgress>\n      <CircularProgress\n        variant=\"static\"\n        color=\"primary\"\n        className={classes.top}\n        value={percentComplete + 5}\n        thickness={2}\n        size={100}\n      ></CircularProgress>\n    </div>\n  );\n};\n\nexport default QuizProgress;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Route, useParams, useHistory } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport partition from 'lodash/partition';\nimport isNil from 'lodash/isNil';\nimport { CSSTransition } from 'react-transition-group';\nimport { submitAnswer } from '../redux';\nimport { IQuestion, IAppState } from '../types';\nimport QuestionCard from './QuestionCard';\nimport QuizProgress from './QuizProgress';\n\ninterface RouteParams {\n  questionIndex: string;\n}\n\nconst Quiz = () => {\n  const dispatch = useDispatch();\n  const { questionIndex } = useParams<RouteParams>();\n  const history = useHistory();\n  const index: number = +questionIndex;\n  const questions: IQuestion[] = useSelector((state: IAppState) => {\n    return state.questions;\n  });\n  const total: number = questions.length;\n  const [answered] = partition(questions, q => !isNil(q.is_correct));\n  const isCurrentQuestion = index === answered.length + 1;\n  const percentComplete: number = ((index - 1) / total) * 100;\n  const isLastAnswer = !isCurrentQuestion && index === total;\n  useEffect(() => {\n    if (isLastAnswer) {\n      history.push(`/results`);\n    } else if (!isCurrentQuestion) {\n      history.push(`/quiz/${answered.length + 1}`);\n    }\n  }, [answered.length, history, isCurrentQuestion, isLastAnswer]);\n  const { question, category }: IQuestion = questions[+questionIndex - 1];\n  if (!question)\n    return (\n      <p>Oops, the question failed to load! Reload the quiz to try again.</p>\n    );\n  const answerQuestion = (answer: boolean) => {\n    dispatch(submitAnswer({ answer, question }));\n  };\n  return (\n    <>\n      <Box pb=\"1em\" style={{ minHeight: '400px' }}>\n        {questions.map((card, i) => {\n          return (\n            <Route key={i} exact path={`/quiz/${i + 1}`}>\n              {({ match }) => {\n                const isIn = match != null;\n                return (\n                  <CSSTransition\n                    in={isIn}\n                    timeout={1000}\n                    classNames=\"question\"\n                    unmountOnExit\n                  >\n                    <Box pb=\"1em\" key={i} className=\"question\">\n                      <div className=\"category\">\n                        <Typography variant=\"h4\" component=\"h2\" color=\"primary\">\n                          <CategoryIcon color=\"secondary\" /> {category}\n                        </Typography>\n                      </div>\n                      <QuestionCard\n                        question={card.question}\n                        answerQuestion={answerQuestion}\n                      />\n                    </Box>\n                  </CSSTransition>\n                );\n              }}\n            </Route>\n          );\n        })}\n      </Box>\n      <QuizProgress completed={index} total={total} />\n      <LinearProgress\n        variant=\"determinate\"\n        value={percentComplete}\n        color=\"primary\"\n        style={{ position: 'fixed', top: 0, left: 0, right: 0, height: '1px' }}\n      />\n    </>\n  );\n};\n\nexport default Quiz;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport partition from 'lodash/partition';\nimport isNil from 'lodash/isNil';\nimport ReactHtmlParser from 'react-html-parser';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport Box from '@material-ui/core/Box';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport ReplayIcon from '@material-ui/icons/Replay';\n\nimport { IQuestion, IAppState } from '../types';\n\nconst Results = () => {\n  const history = useHistory();\n  const questions: IQuestion[] = useSelector((state: IAppState) => {\n    return state.questions;\n  });\n  const total = questions.length;\n  const [answered] = partition(questions, q => !isNil(q.is_correct));\n  const isFinished = answered.length === total;\n  if (!isFinished) {\n    return <Redirect to={`/quiz/${answered.length + 1}`} />;\n  }\n  const [correct] = partition(questions, q => q.is_correct === true);\n  return (\n    <>\n      <Typography variant=\"h4\" component=\"h2\">\n        You scored {correct.length} / {total}\n      </Typography>\n      <Box py=\"1em\">\n        <Card\n          variant=\"outlined\"\n          style={{ maxWidth: '600px', margin: '0 auto' }}\n        >\n          <CardContent>\n            <List dense>\n              {questions.map(q => {\n                return (\n                  <ListItem key={q.question}>\n                    <ListItemIcon>\n                      {q.is_correct ? (\n                        <AddCircleIcon color=\"primary\" />\n                      ) : (\n                        <RemoveCircleIcon color=\"secondary\" />\n                      )}\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={ReactHtmlParser(q.question)}\n                      secondary={`Correct answer: ${q.correct_answer}.`}\n                    />\n                  </ListItem>\n                );\n              })}\n            </List>\n          </CardContent>\n        </Card>\n      </Box>\n      <Box py=\"2em\">\n        <Fab\n          variant=\"extended\"\n          color=\"primary\"\n          size=\"large\"\n          onClick={() => history.push('/')}\n        >\n          Play again?&nbsp;\n          <ReplayIcon />\n        </Fab>\n      </Box>\n      <LinearProgress\n        variant=\"determinate\"\n        value={100}\n        color=\"primary\"\n        style={{ position: 'fixed', top: 0, left: 0, right: 0, height: '1px' }}\n      />\n    </>\n  );\n};\n\nexport default Results;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  responsiveFontSizes,\n} from '@material-ui/core/styles';\nimport Particles from 'react-particles-js';\nimport particlesConfig from './particlesjs-config.json';\nimport { addQuestions, setStatus } from './redux';\nimport Intro from './components/Intro';\nimport Quiz from './components/Quiz';\nimport Results from './components/Results';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { IAppState, IStatus } from './types';\n\nconst App = () => {\n  const status: IStatus = useSelector((state: IAppState) => {\n    return state.status;\n  });\n  const dispatch = useDispatch();\n  let theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n      primary: {\n        main: '#2D7FF9', // G2i Blue\n      },\n      secondary: {\n        main: '#E23E2F', // G2i Red\n      },\n      background: {\n        default: '#1E1E1E',\n      },\n    },\n    typography: {\n      fontFamily: ['Neucha', '\"Helvetica Neue\"', 'Arial', 'sans-serif'].join(\n        ','\n      ),\n    },\n    overrides: {\n      MuiTypography: {\n        h4: {\n          minHeight: '2.4em',\n          marginBottom: '0.5em',\n        },\n      },\n      MuiCardContent: {\n        root: {\n          padding: '24px',\n        },\n      },\n    },\n  });\n  theme = responsiveFontSizes(theme);\n  async function fetchData() {\n    if (status === IStatus.INIT) {\n      dispatch(setStatus(IStatus.LOADING));\n      const res = await fetch(\n        'https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean'\n      );\n      res.json().then(res => {\n        dispatch(addQuestions((res as any).results));\n        dispatch(setStatus(IStatus.LOADED));\n      });\n    }\n  }\n  useEffect(() => {\n    fetchData();\n  });\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Particles\n        params={particlesConfig as any}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          overflow: 'hidden',\n        }}\n      />\n      <Container fixed>\n        <Box textAlign=\"center\" marginTop=\"3em\">\n          <Router basename={`${process.env.PUBLIC_URL}/`}>\n            <Switch>\n              <Route exact path=\"/\" component={Intro} />\n              <Route exact path=\"/quiz/:questionIndex\">\n                {status === IStatus.LOADED ? (\n                  <Quiz />\n                ) : (\n                  <CircularProgress color=\"primary\" />\n                )}\n              </Route>\n              <Route exact path=\"/results\" component={Results} />\n            </Switch>\n          </Router>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Neucha'],\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}